** JavaScript
- 출력하는 방법
 body에 출력 : document.write, document.writeln
 대화상자에 출력 : alert - modal(한 번 제어권을 잡으면 종료될 때 까지 제어권을 놓지 않는 대화상자)
 콘솔에 출력(브라우저 내에서는 볼 수 없고 브라우저의 검사 창이나 IDE의 console에서 확인) : console.log

- 데이터에 이름 붙이기
 global(블럭 외부에서 선언돼서 모든 곳에서 사용 가능)과 local(블럭 안에서 만들어져서 블럭 내부에서만 사용 가능)

hoisting : 선언(만들기)하기 전에 사용하는 것 - 자바스크립트에서만 사용하는 용어

이름=데이터 // global로 만들어지고 hoisting이 가능
var 이름 = 데이터 // 지역 변수로 만들어지는데 함수 안에서 만든 것은 함수 외부에서 사용 가능, hoisting가능
let 이름 = 데이터 // 지역변수로 만들어짐

const 이름 = 데이터 // 변경할 수 없는 읽기전용

- 기본 자료형
 숫자, 문자열, boolean, undefined, null
- 연산자 : 연산을 수행해주는 부호나 명령어

1. 제어문
=>코드는 왼쪽에서 오른쪽으로 위에서 아래로 순차적으로 수행됨. 특정 블럭으로 분기하거나 반복하도록 해주는 명령어

1) 제어문
=> branch(분기)
값에 의한 분기 : switch(언어를 학습할 때 switch는 항상 확인)
조건(true false)에 의한 분기 : if

=> loop(반복)
반복
순회 : 0개 이상의 데이터를 가진 collection을 순차적으로 접근

=> 기타
반복을 빠져나오는 것
다음 반복으로 넘어가는 것
현재 모듈의 수행을 종료하고 호출한 곳으로 돌아가는 것



2) IF
=> 조건에 의한 분기 : if
if(표현식){
	표현식이 Truthy인 경우 수행할 내용
}else if(표현식1){
	이전의 표현식이 Falsy이고 표현식1이 Truthy인 경우 수행할 내용
}...
}else{
	이전 모든 표현식이 Falsy인 경우 수행할 내용
}
=> Falsy : false, 0, null, undefined, ""(빈 문자열)
=> if는 1번만 사용
=> else if 는 0번 이상 무제한 사용 가능
=> else는 생략 또는 1번만 사용
=> else if와 else는 반드시 if와 함께 사용되어야함
=> 표현식은 변수, 연산식, 리턴이 있는 함수 호출

3) switch
=> 값에 의한 분기
=> 값은 정수와 문자열이 가능
=> 기본 형식
switch(정수나 문자열 표현식){
	case 값1 :
		() 안의 내용이 값1일 때 수행할 내용
		
	case 값2 :
		() 안의 내용이 값2일 때 수행할 내용
	...
	default :
		일치하는 값이 없을 때 수행할 내용
}

=> javascript에서 switch는 fallthrough가 기본이어서 일치하는 값을 만나면 break를 만날때까지 계속 수행
=> 정수나 문자열 표현식에 true를 설정하면 값의 자리에 조건을 설정해서 true인 경우 수행하도록 할 수 있음
=> case의 개수는 제한이 없음
=> default는 생략하거나 1번만 사용


4) if나 switch를 사용할 때 주의할 점
=> 조건문을 결합하다 보면 수행될 수 없는 조건을 만드는 경우가 있음
=> 도달할 수 없는 코드를 작성하는 것

if(score >= 80){
	...
} else if(score >= 90){
	도달할 수 없는 코드
}
=> 모든 상황에 대한 처리를 해주는 것이 좋음

5) while
while(boolean 표현식){
	표현식이 Falsy가 아니면 수행할 내용
}
=> 표현식을 확인하면서 { } 의 내용을 반복

6) do ~ while
do{
	표현식이 Falsy가 아니면 수행할 내용
}while(boolean표현식)
=> 표현식을 확인해서 표현식이 아닌 Falsy가 아니라면 { }안의 내용을 반복
=> while은 한번도 수행하지 않을 수 있지만 do~while은 반드시 1번은 수행해야함


7) for
=> while과 유사한 용도로 사용할 수 있고 객체나 배열을 순회하는 용도로 사용 가능
for(처음 한 번만 수행되는 식; 판별을 위한 표현식; 두번째 반복부터 수행할 식){
	표현식이 falsy 가 아닌 경우 수행할 내용
}

=> while처럼 사용
        for(let idx = 0 ; idx < 5 ; idx=idx+1){
            console.log(idx)
        }
=> 3가지의 식은 생략 가능
=> for에서 첫번째와 세번째 식의 자리에는 여러개의 수행문을 작성할 수 있음
        for(let idx = 0, i = 0 ; idx < 5 ; idx=idx+1, i = i + 2){
            console.log(idx)
        }
=> for~in
for(임시변수 in 배열이나 객체){
	수행할 문장
}
배열에서는 인덱스가 순서대로 임시변수에 대입이 되고 객체의 경우는 속성이 임시 변수에 대입

let ar = ["사이버 가수 아담", "강진 축구", "프리스톤 테일"]
for(idx in ar){
	console.log(idx);
}
	console.log(ar[idx]);


1. function(함수)
1) 개요
- 별도의 메모리를 할당받아서 수행되는 코드 블럭
- 목적
모듈화 : 프로그램을 용도별로 적잘히 분할
메모리를 호율적으로 이용하기 위해서

- 종류
user define function : 사용자 정의 함수

maker function : 언어나 프레임워크가 제공

3rd party function : 다른 개발자가 만들어서 제공

2) 사용자 정의 함수 생성과 호출
=> 사용자 정의 함수 선언(생성)
//이전 방식
function 함수이름(매개변수 나열){
	함수 내용 작성
	return 데이터 // 상황에 따라 생략될 수 있음

//최근에 권장하는 방식
let 이나 var 변수이름 = function(매개변수 나열){
	함수 내용 작성
	return 데이터
}

=> 함수 호출 - 함수를 실행
함수 이름(매개변수 대입)

주의할 점은 함수이름만 기재하는 것은 함수를 참조하는 것

document.write(내용) : 함수를 호출
document.write : 함수를 참조 - 함수의 내용이 있는 곳의 참조

3) 매개변수(argument, parameter, 인자, 인수)
=> 함수를 호출할 때 넘겨주는 데이터
=> 개수 제한은 없고 함수를 만들 때 이름만 기재하면 됨
함수를 호출할 때 데이터를 대입을 해줘야 하는데 뒤에서부터 생략 가능
함수를 확인할 때 매개변수를 잘 확인해야함
javascript나 python은 매개변수의 자료형을 기재하지 않기 때문에 이름을 잘 만들어줘야함

4) return
=> 함수가 작업을 수행하고 호출하는 곳으로 돌아가는 제어 명령
=> return다음에 하나의 데이터를 가지고 돌아갈 수 있음
return다음에 데이터를 기재해서 돌아가면 그 결과를 재활용할 수 있음
파이썬에서 데이터 전처리 함수나 분석 함수는 특별한 경우가 아니면 데이터를 리턴
전처리 함수에서 데이터 원본에 작업을 수행하는 것은 굉장히 위험


5) 자바스크립트에서 함수는 일급 객체
=> 함수도 하나의 자료형으로 간주됨(함수도 하나의 데이터)
=> 함수의 내용을 변수에 대입하는 것이 가능하고 매개변수로 사용하는 것도 가능하고 리턴하는 것도 가능
함수의 내용을 변수에 대입하는 이유는 이벤트 처리나 다형성 구현을 위해서 - delegate
함수를 매개변수로 받는 이유는 함수에 따라 수행하는 일을 다르게 하기 위해서 - map reduce programming에서 사용(map, filter, reduce)

함수를 리턴하는 경우는 대부분 closure를 구현하기 위해서

6) closure
=> 함수 안에서 함수를 리턴해서 함수 내부의 데이터를 외부에서 변경하는 것


7) arrow function
=> 함수를 이름없이 생성하는 것
(매개변수 나열) => {
	함수의 내용을 작성
}

=> 함수를 미리 만들어두지 않고 필요할 때 만들어서 사용하는 개념
=> 이벤트 처리를 할 때 주로 이용
=> 이벤트(사용자나 시스템이 발생시키는 사건) 처리에 사용하는 함수는 이벤트가 발생하지 않으면 필요없는 함수이기 때문

8) 내장 함수(Maker Function)
=> 프로그래밍 언어가 제공하는 함수
=> javascript에서는 window객체가 제공하는 함수가 내장 함수로 간주
객체가 소유한 함수는 메서드라고 하는데 메서드는 리시버와 함께 호출해야 하는데 window객체의 메서드만은 리시버를 생략하면 window 객체의 메서드가 호출됨

=> alert(메시지) : 모달 대화상자로 메시지를 출력
=> confirm(메시지) : 확인과 취소 버튼을 제공하고 확인을 누르면 true가 취소를 누르면 false가 리턴되는 함수


* encoding : 메모리에 저장되는 형태로 만드는 것
* decoding : 알아볼 수 있도록 변환하는 것



3. OOP(객체 지향 프로그래밍)
1) Object(객체)
=> 프로그래밍에서 존재하는 모든 것은 객체
=> 동일한 목적을 달성하기 위해 모인 속성과(변수나 상수) 과 메서드(함수)의 집합
=> Instance : 클래스를 기반으로 만들어진 객체

2) 객체 지향의 3대 성질
=> 캡슐화(Encapsulation) : 클래스와 인스턴스를 만드는 것
=> Inheritance(상속) : 하위 객체가 상위 객체로 물려받는 것 - 재사용
=> Polymorphism(다형성) : 동일한 메시지에 대하여 다르게 반응하는 성질



































