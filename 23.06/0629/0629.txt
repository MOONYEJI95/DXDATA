1. 웹 클라이언트
데이터를 전송하면 웹 서버에서 처리
처리/저장하는 2가지

1) 어플리케이션
- 처리
2) data store(혹은 DB, repository 등 으로 명칭)
- 저장

2. 웹 서버
- 항상 서비스 준비가 되어있어야 함
- 주소가 달라지면 찾아가는 방법이 달라지기 때문에 주소가 고정이어야 함

cd 폴더이름 > 디렉토리 바꾸기

http://localhost:52330/23.06/0629/index.html
localhost자리에 ip주소 넣기

영역 태그 - 다른 콘텐츠를 출력하기 위한 용도의 태그
<div></div> : 블록 태그
<span></span> : 인라인 태그
<iframe></iframe> : 링크들고와서 보여주는거


CSS
1. 개요
=> 웹 페이지의 디자인을 담당하는 언어(도구)

2. 중요한 내용
선택자{
	속성:값;
	....
}
3. CSS를 적용하는 방법 : 역할 별로 분리해서 작성하는 것을 권장
1) 외부에 스타일시트 파일을 만들고 HTML문서에서 불러다 사용하는 것 - 권장
<link rel="stylesheet" href="스타일시트파일경로"/>

2) HTML문서 내에 style이라는 태그를 이용해서 사용하는 것
<style></style> 안에 작성

3) 태그 내에 style을 설정하는 것(inline) - 가장 비추천
<태그 style="속성=값"></태그>

4) 중복되는 경우에는 마지막 또는 가까이서 작성한 것이 우선권을 가짐

4. 설정방법
1)기본 형식
selector(선택자){
	속성:값;
	...
	..
}
=> 선택자 : 어떤 개체에게 적용할지를 결정
=> 속성 : 어떤 성질
=> 값 : 적용할 데이터로 문자열과 예약어를 구분하므로 "red" 와 red는 다른 것
"red"는 문자열 red이지만 red는 예약어 red   
* 예약어 : 미리 기능을 전해준 명령어
2) 규칙
=> 속성과 값은 쌍으로 지정되어야 하며 콜론으로 구분
=> 하나의 속성과 값만 존재하는 경우는 ; 을 생략해도 되지만 여러 개의 속성과 값이 있는 경우는 반드시 ;으로
속성을 구분해야함
=> 들여쓰기나 줄바꿈은 기능에는 아무 영향을 주지 않음

5. selector(선택자)
=> HTML문서 내에서 특정 개체나 그룹을 선택하기 위한 문법
=> 웹 크롤링에서도 선택자를 종종 이용함
1) 기본 선택자
* 모든것
태그 (p, span 등등 태그 그대로 써주면 됨)
.클래스이름
#id

2)주석 - 보충설명 : 소스 코드에 대한 부가적인 설명을 작성하는 용도로 작성
/* 내용 */
예전에는 주석을 많이 작성하라고 했는데 최근에 주석을 많이 작성하는 것보다는 그 시간에 기능을 구현하는 것이 훨씬 더 효율적
우리나라 외부 프로젝트를 진행하는 경우는 예외
3) 의사 클래스
=> 선택자에 스타일을 상황에 따라 적용하는 것
선택자:의사클래스로 설정
=> 링크
link : 일반 링크
visited : 방문한 링크

=> 사용자 동작
hover : 마우스가 올라오면
active : 클릭하면
focus : 포커스가 오면 - input에서만 가능

=> UI 요소 상태에 따라
checked : 체크 된것
enabled : 활성화
disabled : 비활성화

6. 단위
=> 절대 단위 : 고정된 크기로 인쇄할 때 주로 이용
=> 상대 단위 : 화면 크기에 따라 변경되는 단위로 스크린에는 상대 단위를 이용


7. typegragh
=> 글자와 관련된 속성


Git
=>소스코드 버전 관리를 위한 명령어의 집합
=> git hub : 소스 코드 버전 관리와 협업 및 CI/CD 구축 기능을 제공하는 MS의 web service

1. 로컬작업 - 이 작업을 수행해서 commit을 해야만 git hub에 업로드 가능
1) 현재 프로젝트 디렉토리를 git 명령어로 관리하기 위해서 초기화를 수행
git init => 이 명령어는 처음 한번만 수행
.git이라는 숨김 디렉토리가 생성
.git이라는 디렉토리가 삭제되면 git연결이 해제됨
삭제하는 명령 : rm -rf .git

2) git이 관리할 파일을 등록
git add 파일경로
=> 파일 경로 대신에 . 을 입력하면 디렉토리이 모든 내용을 git이 관리
=> 파일을 수정하고 수정한 내용을 업로드 할 때는 이 명령부터 다시 수행

3) 변경 내용을 로컬 git에 반영
git commit -m "메세지"
=> 반영이 안되는 경우 에러 메시지를 확인해보면 email과 name을 등록하라고 뜨는 경우가 있음
이때 아래 명령어로 email과 name을 등록하고 수행하면 됨

git config --global user.email "git에 등록한 이메일"
git config --global user.name "git에 등록한 이름"

2.로컬에 만든 프로젝트 처음 업로드
repository는 하나의 큰 저장소이고 이 안에 branch라는 작은 저장소가 만들어짐
repository이름과 branch이름이 같으면 덮어씌우게 됨
repository이름은 같지만 branch이름이 다르면 별도로 저장하게 되고 이를 나중에 합칠 수 있음
처음 업로드 할 떄는 branch이름으로 main을 많이 사용하고 코드를 변경하고 리뷰가 끝나면 main에 다시 push를 하고 코드를 변경하고 리뷰가 끝나지 않았다면 main이 아닌 다른 branch에 업로드를 함


1) git hub 사이트에 repository를 생성한 후 URL을 복사
https://github.com/MOONYEJI95/DXDATA.git

2) 로컬 git 프로젝트에 repository를 연결
git remote add 레포지토리이름 저장소주소

=> 확인 : git remote -v
=> 연결 해제 : git remote remove 레포지토리이름
=> 이전의 관습때문에 repository이름을 origin으로 하는 경우가 많음

3. 업로드
=> git push 레포지토리이름 브랜치이름(첫번째 저장소 이름으로 main을 많이 사용)
바로 업로드가 될 수도 있고 로그인을 하거나 토큰을 등록하라고 하기도 함
실수로 로그인 창을 없앤 경우 연결 작업부터 다시 하면 로그인 창이 다시 출력됨
->업로드 확인은 git hub사이트에서 확인
=> push가 안되는 경우
git push -u origin main

=> 위 명령어로도 안되는 경우
git checkout -b "main"
git push origin main

4) 변경한 후 업로드
git add .
git commit -m "메세지"
git push 레포지토리이름 브랜치이름

5) gitignore
=> 업로드에서 제외하고자 하는 파일이나 디렉토리를 설정
=> 프로젝트 안에 .gitignore라는 파일을 만들고 업로드에서 제외할 디렉토리 이름이나 파일 이름을 줄단위로 나열
logs라는 파일을 제외하고자 하는 경우 : logs
node_modules라는 디렉토리를 제외하고자 하는 경우 : node_modules/
확장자가 .log인 파일을 제외하고자 하는 경우 : *.log
log디렉토리에 있는 .log 파일만 제외 : log/*.log


3. 다운로드
1) 없을 때 전체를 가져오는 것 : clone
git clone 레포지토리주소 레포지토리이름

2) 프로젝트가 변경된 내용만 가져오고자 하는 경우 : pull

3) git pull 레포지토리이름 브랜치이름








