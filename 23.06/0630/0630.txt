JavaScript
=> 웹 브라우저가 해석해서 동작하는 스크립트 언어
=> 현재는 다양한 라이브러리의 출현으로 거의 못하는 일이 없음

1. JavaScript 사용 방법
1) 태그 안에 작성 - 비추천
<태그 이벤트이름 ="스크립트 코드">
ex) <button onclick="alert('버튼 클릭')">버튼</button>


2) HTML 파일 안에 영역을 만들어서 스크립트 코드 작성
<script> 내용 </script>


ex)
<button id="btn">버튼</button>
<script>
        document.getElementById("btn").addEventListener("click",
        function(){
            alert("두번째 버튼 클릭")
        })

3) 외부에 있는 js파일을 가져와서 사용
<script src="파일경로"></script>
ex)
    <script src="./js/first.js"></script>

2. 실습
1) 프로젝트 안에 js디렉토리를 만들고 first.js파일을 생성하고 작성
alert("시작하자 마자 수행")
2) 프로젝트 안에 html파일을 만들고 작성
3) 실행을 하면 시작하자 마자 대화상자가 출력되어야 하고 각 버튼을 누르면 대화상자가 출력되어야 함

3. 에러 코드 확인
=> 대다수의 브라우저는 검사 기능을 제공하기 떄문에 검사 기능을 이용해서 물리적인 오류를 찾을 수 있음

4. 규칙
=> 대소문자 구분
=> 줄 단위로 읽어서 실행
줄의 마지막에 ;을 할 필요는 없지만 관습적으로 하는 경우가 많음
한 줄에 2개 이상의 명령어를 사용하는 경우에는 반드시 ; 으로 구분해야함
하나의 명령어는 =를 사용하거나 함수이름() 을 호출하는 것

5. 주석(comment)
=> 해석하지 않는 코드로 코드에 대한 보충 설명을 작성할 용도로 사용
1) 한 줄 주석
//주석 내용
2) 블럭 주석
/* 
   주석 내용
   ...
*/

3) 해석하지 않고 문자열로 처리
<![CDATA[내용]]>

6. Keyword와 사용자 정의 명칭
1) Keyword
=> 프로그래밍 언어가 기능을 정한 명령어나 기호

2) 사용자 정의 명칭
=> 개발자가 기능을 정하는 단어
=> keyword는 사용자 정의 명칭으로 사용할 수 없음
=> 문자로 시작해야 하고 _와 $ 는 사용 가능
=> 숫자는 시작 문자로는 사용할 수 없지만 사용 가능
=> 중간에 공백을 포함할 수 없음


7. Data 분류
1) Literal : 프로그래밍 언어에서 데이터를 표현하는 방법
=> 10진 정수 : 987
=> 실수 : 3.2, 0.32E+0001
=> bool: true, false
=> 문자열: "문자 나열", '문자 나열'
=> 가리키는 데이터가 없다 : null

2) Mutable Data와 Immutable Data
=> Mutable Data : 변경 가능한 데이터
=> Immutable Data : 변경 불가능한 데이터

3) Scala Data와 Vector Data
=> Scala Data : 1개의 데이터
=> Vector Data : 0개 이상의 데이터

4) 데이터 유형에 따른 분류
=> 정형 : 테이블처럼 구조가 일정한 데이터 
=> 비정형 : 구조가 일정하지 않은 데이터 - 일반텍스트, 음성 등
=> 반정형 : 비정형처럼 보이지만 메타 데이터를 포함하고 있어서 정형으로 변경이 가능한 데이터 - xml, json, yaml

5) 저장하고 있는 데이터의 종류에 따른 분류
=> Value : 값
=> Reference : 참조

8. 메세지 출력
1) 대화상자로 출력 : alert(데이터)
2) HTML문서 내에 출력
document.write(데이터) : 여러개의 write가 있는 경우 모아서 출력
document.writeln(데이터) : 바로바로 출력

3) 검사창의 console에 출력
console.log(데이터)

9. 데이터에 이름 붙이기
1) 전역 데이터(global data - 만들면 아무곳에서나 사용할 수 있는 데이터)로 만들기
이름=값
=> 값에 이름으 붙인것으로 이름을 호출하면 값이 옴

2) 지역 데이터(local data - 만들면 자신의 영역에서만 사용 가능)
var 이름 = 값 //hoisting이 가능하고 값을 변경할 수 있는 형태로 생성
let 이름 = 값 //hoisting이 불가능하고 값을 변경할 수 있는 형태로 생성 - 권장
const 이름 =값 // 값을 변경할 수 없음

3) 값 변경
기존이름 = 값

4) hoisting
=> 이름을 만들기 전에 사용이 가능한 것

5) 데이터의 종류 확인 : typeof 데이터
=> number : 숫자
=> string : 문자열(문자의 집합)
=> boolean : true 또는 false
=> undefined : 데이터가 존재하지 않는 이름(이름자체가 없음)
=> null : 가리키는 데이터가 없는 경우(이름은 있음)


6) 실습

7) Array(배열)
=> 동일한 형태를 갖는 데이터의 모임으로 하나의 이름으로 생성
=> array와 list를 구분하는 것은 한 번 만들면 확장과 축소가 안되는 것이 array(배열)이고 확장과 축소가 가능하면 list
=> 자바스크립트의 배열은 list

=> 생성
let 이름 = [초기 값 나열]
let 이름 = new Array(값 나열)
let 이름 = new Array(개수) : 여러개의 데이터를 저장할 공간만 확보

=> 각각의 데이터 접근
이름[인덱스]
인덱스는 0부터 시작

let names = ["adam", "강진축구"]
names[0] -> adam
names[1] -> 강진축구
names[2] -> 에러

=> 배열의 데이터 개수를 확인 : 배열이름.length
=> 배열이름을 출력하면 기본 자료형인 경우는 데이터가 전부 출력되고 기본 자료형이 아닌 경우는 자료형 이름이 출력됨

8) 배열 실습

9) 데이터 종류 변환
=> 문자열을 숫자로 변환 : Number(문자열)
=> 숫자를 문자열로 변환 : String(숫자)


10) Operator(연산자)
=> 연산을 수행해주는 명령어나 기호
1] 연산의 분류
=> 산술 연산(Arithmetic) : 연산의 결과가 리턴
=> 논리 연산(Logical) : 연산의 결과가 boolean으로 리턴

=> 단항 연산(Unary) : 데이터가 1개만 있으면 수행되는 연산
=> 이항 연산(Binary) : 데이터가 2개 있어야 수행되는 연산
=> 삼항 연산(Ternary) : 데이터가 3개 있어야 수행되는 연산

2] 할당 연산자
= : 오른쪽의 데이터를 왼쪽의 이름이 가리킬 수 있도록 하는 연산자
왼쪽에는 반드시 이름이 와야하고 오른쪽은 이름과 리터럴과 계산식과 함수 호출 모두 가능
let a = 10
a = 30 + 4
a = a + 1   // =의 왼쪽이 아닌 곳에서 이름이 사용되면 이 경우는 이름이 아니고 가리키는 데이터

1 = a // 에러

3] 산술 연산자
=> + : 숫자끼리는 덧셈을 해주고 문자열과 숫자 또는 문자열과 문자열의 경우에는 결합(이어붙이기)
=> -
=> * : 숫자로 구성된 문자열을 가지고 *을 하면 실제 곱하기을 함
=> / : 나누기
=> % : 나머지, 실수도 가능한데 실수를 가지고 나머지를 구하면 결과가 이상하게 나올 수 있음

4] 증감연산자
정수 변수에만 사용이 가능한 연산자
++는 정수 변수의 값을 1 증가
-- 정수 변수의 값을 1 감소

a = 0
console.log(a++)  > 0으로 출력
console.log(++a)  > 1로 출력

int a = 0
printf(++a + ++a)//c  > 4로 출력 (변수값을 다 계산해놓고 연산)

System.out.println(++a + ++a)//java > 3으로 출력
(값을 가져오면서 수행)

변수의 값을 1 증가시키는 방법
a = a + 1
a += 1
a ++


5] 비교 연산자 : 논리 연산자
>, >=, <, <=

==(같다), !=(다르다)
=> 실수 데이터와 실수 연산의 결과를 동일성 여부를 비교할 때는 주의
머신 엡실론 문제가 발생
실수 데이터를 컴퓨터는 정확하게 표현하지 못하는 문제

- 산술 비트 연산
정수 데이터를 2진수로 변경해서 비트 단위로 연산한 후 결과를 정수로 리턴하는 연산자
~ (1의 보수) 0->1, 1->0
^ (Exclusive OR - XOR) - 같으면0 다르면1
& (and) 둘 다 1이면 1 아니면 0
| (or) 둘다 0이면 0 아니면 1


=> 0.1을 1000번 더했는데 결과가 100이 아님
=> 1.0-0.8과 0.2와 같냐고 물어봤는데 false가 출력


6] 산술 비트 연산자
=> 정수 데이터를 2진수를 변경해서 연산을 수행한 후 결과를 정수 데이터로 리턴

~ : 단항 연산자로 1의 보수를 구해주는 연산자
^ : exclusive or 라고 읽는데 같으면 0 다르면 1, 주로 비교하는데 사용
& : and라고 읽는데 둘다 1이면 1이고 그렇지 않은 경우는 0, 데이터를 삭제하거나 여러개의 조건을 만족해야 하는 것을 만들 때 이용
| : or라고 읽는데 둘 다 0이면 0이고 그렇지 않은 경우는 1, 데이터를 삭제하거나 여러개의 조건 중 하나 이상 만족하는 것을 만들고자 할 때 사용


<< : 왼쪽의 데이터를 오른쪽의 데이터 만큼 왼쪽으로 밀어주는 연산자

>> : 왼쪽의 데이터를 오른쪽의 데이터 만큼 오른쪽으로 밀어주는 연산자


7] 비트 논리 연산자
!(not) : true는 false로 false는 true로 변경

&& : 둘 다 true인 경우만 true이고 그렇지 않은 경우는 false

|| : 둘 다 false인 경우만 false이고 그렇지 않은 경우는 true

=> short circuit 또는 don't care
&&는 앞의 조건이 false이면 뒤의 조건을 확인하지 않음
||는 앞의 조건이 true이면 뒤의 조건을 확인하지 않음

1~100까지에서의 3의 배수이고 4의 배수인 숫자의 개수를 확인
let cnt = 0
for(let i = 1; i<=100; i++){
	if(i % 4==0 && i % 3 ==0){
		cnt = cnt + 1
>> 4로 나누는 횟수가 더 적기 떄문에 4를 먼저 써주는게 처리속도가 더 빠름(&&는 앞의 조건이 false이면 뒤 조건 확인x)


8] 복합 할당 연산자
이름 연산자 = 데이터
=> 왼쪽 이름의 데이터와 오른쪽 데이터를 연산한 후 다시 왼쪽 이름이 가리키도록 하는 것

let a = 10

a += 7  //  a = a + 7

9] 삼항 연산자
boolean 데이터가 나오는 식 ? 값1 : 값2
=> 앞의 식이 true이면 값1 false이면 값2

let result = 10 > 5 ? 10 : 5

10] 기타 연산자
new : 생성자를 호출해서 객체를 생성

this : 생성자 안에서 객체 자신을 가리키는 연산자

typeof : 자료형을 리턴하는 연산자

delete : 삭제하는 연산

instance of : 객체의 자료형을 확인

in : 속성의 존재 여부 확인


11] 자바스크립트에서만 적용되는 연산
동일성 여부
== : 데이터의 종류에 상관없이 값만 같으면 true
=== : 데이터의 종류도 같아야 true

12 == "12"   > true
12 === "12"   > false

!==
!===

Falsy : false로 간주하는 데이터
숫자 : 0
null
undefined
"" : 빈 문자열

nullish operator
왼쪽의 데이터가 null 또는 undefined이면 오른쪽 데이터를 대입

let r = 데이터 ?? 데이터












